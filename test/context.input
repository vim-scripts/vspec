function! s:describe__ResetContext()  "{{{1
  let DUMMY_SCOPE_CONTENT = {'misaka': 'mikoto', 'shirai': 'kuroko'}
  let g:dummy_scope = deepcopy(DUMMY_SCOPE_CONTENT)
  let old_reference_of_dummy_scope = g:dummy_scope

  It should reset to the state when vspec#hint() is called

  call vspec#hint({'scope': 'g:dummy_scope'})

  Should g:dummy_scope == DUMMY_SCOPE_CONTENT

  let g:dummy_scope['misaka'] = 'electromaster'
  let g:dummy_scope['shirai'] = 'teleporter'

  ResetContext

  Should g:dummy_scope == DUMMY_SCOPE_CONTENT
  Should g:dummy_scope is old_reference_of_dummy_scope

  It should not touch new items which are set after vspec#hint()

  let g:dummy_scope['level'] = 5

  ResetContext

  Should g:dummy_scope == {'misaka': 'mikoto', 'shirai': 'kuroko', 'level': 5}
  Should g:dummy_scope is old_reference_of_dummy_scope
endfunction




function! s:describe__SaveContext()  "{{{1
  let DUMMY_SCOPE_CONTENT = {'misaka': 'mikoto', 'shirai': 'kuroko'}
  let g:dummy_scope = deepcopy(DUMMY_SCOPE_CONTENT)
  let old_reference_of_dummy_scope = g:dummy_scope
  call vspec#hint({'scope': 'g:dummy_scope'})

  It should reset to the state when :SaveContext is executed

  let g:dummy_scope['misaka'] = 'electromaster'
  let g:dummy_scope['shirai'] = 'teleporter'
  SaveContext

  ResetContext

  Should g:dummy_scope == {'misaka': 'electromaster', 'shirai': 'teleporter'}
  Should g:dummy_scope is old_reference_of_dummy_scope

  It should not touch new items which are set after :SaveContext

  let g:dummy_scope['level'] = 5

  ResetContext

  Should g:dummy_scope
  \ == {'misaka': 'electromaster', 'shirai': 'teleporter', 'level': 5}
  Should g:dummy_scope is old_reference_of_dummy_scope
endfunction




" __END__  "{{{1
" vim: filetype=vim foldmethod=marker
